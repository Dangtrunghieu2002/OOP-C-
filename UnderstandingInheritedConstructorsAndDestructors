

#include <iostream>
#include <iomanip>
#include <cstring>
using namespace std;
class Person
{
private:
// data members
char *firstName;
char *lastName;
char middleInitial;
char *title; // Mr., Ms., Mrs., Miss, Dr., etc.
protected:
// make available to derived classes in their scope
void ModifyTitle(const char *);
public:
Person(); // default constructor
Person(const char *, const char *, char, const char *);
Person(const Person &); // copy constructor
~Person(); // destructor
// inline function definitions
const char *GetFirstName() const { return firstName; }
const char *GetLastName() const { return lastName; }
const char *GetTitle() const { return title; }
char GetMiddleInitial() const { return middleInitial; }
};


Person::Person()
{
firstName = lastName = 0; // NULL pointer
middleInitial = '\0';
title = 0;
}
Person::Person(const char *fn, const char *ln, char mi,
const char *t)
{
firstName = new char [strlen(fn) + 1];
strcpy(firstName, fn);
lastName = new char [strlen(ln) + 1];
strcpy(lastName, ln);
middleInitial = mi;
title = new char [strlen(t) + 1];
strcpy(title, t);
}
Person::Person(const Person &pers)
{
firstName = new char [strlen(pers.firstName) + 1];
strcpy(firstName, pers.firstName);
lastName = new char [strlen(pers.lastName) + 1];
strcpy(lastName, pers.lastName);
middleInitial = pers.middleInitial;
title = new char [strlen(pers.title) + 1];
strcpy(title, pers.title);
}
Person::~Person()
{
delete firstName;
delete lastName;
delete title;
}
void Person::ModifyTitle(const char *newTitle)
{
delete title; // delete old title
title = new char [strlen(newTitle) + 1];
strcpy(title, newTitle);
}


class Student
: public Person
{
private:
// data members
float gpa;
char *currentCourse;
const char *studentId;
public:
// member function prototypes
Student(); // default constructor
Student(const char *, const char *, char, const char *,
float, const char *, const char *);
Student(const Student &); // copy constructor
~Student(); // destructor
void Print() const;
void EarnPhD(); // public interface to inherited
// protected member
// inline function definitions
float GetGpa() const { return gpa; }
const char *GetCurrentCourse() const
    {return currentCourse; }
    const char *GetStudentId() const { return studentId; }
    // prototype only, see inline function definition below
    void SetCurrentCourse(const char *);
    };
    inline void Student::SetCurrentCourse(const char *c)
    {
    delete currentCourse; // delete existing course
    currentCourse = new char [strlen(c) + 1];
    strcpy(currentCourse, c);
    }


Student::Student() : studentId (0) // default constructor
{
gpa = 0.0;
currentCourse = 0;
}
// alternate constructor
Student::Student(const char *fn, const char *ln, char mi,
const char *t, float avg, const char *course,
const char *id)
: Person(fn, ln, mi, t)
{
gpa = avg;
currentCourse = new char [strlen(course) + 1];
strcpy(currentCourse, course);
char *temp = new char [strlen(id) + 1];
    strcpy (temp, id);
    studentId = temp;
    }
    // copy constructor
    Student::Student(const Student &ps)
    : Person(ps)
    {
    gpa = ps.gpa;
    currentCourse = new char [strlen(ps.currentCourse) + 1];
    strcpy(currentCourse, ps.currentCourse);
    char *temp = new char [strlen(ps.studentId) + 1];
    strcpy (temp, ps.studentId);
    studentId = temp;
    }
    // destructor definition
    Student::~Student()
    {
    delete currentCourse;
    delete (char *) studentId;
    }
    void Student::Print() const
    {
    // Private members of Person are not directly accessible
    // within the scope of Student, so we use access functions
    cout << GetTitle() << " " << GetFirstName() << " ";
    cout << GetMiddleInitial() << ". " << GetLastName();
    cout << " with id: " << studentId << " gpa: ";
    cout << setprecision(2) << gpa;
    cout << " course: " << currentCourse << endl;
    }
    void Student::EarnPhD()
    {
    // Protected members defined by the base class are
        //accessible within the scope of the derived class.
        // EarnPhd() provides a public interface to this
        // functionality for derived class instances.
        ModifyTitle("Dr.");
    }


int main()
{
Student s1("Jo", "Li", 'U', "Ms.", 3.8, "C++", "178PSU");
// Public members of Person and Student are accessible
// outside the scope of their respective classes....
s1.Print();
s1.SetCurrentCourse("Doctoral Thesis");
s1.EarnPhD();
s1.Print();
return 0;
}
